// Generated by CoffeeScript 1.4.0
// taken from https://github.com/cweill/Sorted-Circular-Doubly-Linked-List

var Node, SortedCircularDoublyLinkedList, test;

function Node(datum, prev, next) {
	this.datum = datum;
	this.prev = prev;
	this.next = next;
}

function SortedCircularDoublyLinkedList(head, tail) {
	this.head = head;
	this.tail = tail;
}

SortedCircularDoublyLinkedList.prototype.compare = function(datum1, datum2) {
	return datum1 - datum2;
};

SortedCircularDoublyLinkedList.prototype.insertAll = function(list) {
	var x, _i, _len;
	if (list == null) {
		list = [];
	}
	for (_i = 0, _len = list.length; _i < _len; _i++) {
		x = list[_i];
		this.insert(x);
	}
	return this.head;
};

SortedCircularDoublyLinkedList.prototype.insert = function(datum) {
	var current, insertAfter, insertBefore, next, node;
	node = new Node(datum);
	insertBefore = function(a, b) {
		if (b === this.head) {
			a.prev = this.tail;
			this.head = a;
			this.tail.next = this.head;
		}
		else {
			a.prev = b.prev;
			b.prev.next = a;
		}
		a.next = b;
		return b.prev = a;
	};
	insertAfter = function(a, b) {
		if (b === this.tail) {
			a.next = this.head;
			this.tail = a;
			this.head.prev = this.tail;
		}
		else {
			a.next = b.next;
			b.next.prev = a;
		}
		a.prev = b;
		return b.next = a;
	};
	if (this.head == null) {
		this.head = node;
		this.head.next = node;
		this.head.prev = node;
		this.tail = this.head;
		return node;
	}
	if (this.compare(this.head.datum, node.datum) > 0) {
		insertBefore(node, this.head);
	}
	else {
		current = this.head;
		while (current !== this.tail) {
			next = current.next;
			if (this.compare(next.datum, node.datum) > 0) {
				break;
			}
			current = current.next;
		}
		insertAfter(node, current);
	}
	if (this.compare(node.datum, this.head.datum) < 0) {
		this.head = node;
	}
	if (this.compare(node.datum, this.tail.datum) > 0) {
		this.tail = node;
	}
	return node;
};

SortedCircularDoublyLinkedList.prototype.remove = function(datum) {
	var current;
	current = this.head;
	while (this.compare(current.datum, datum) !== 0) {
		current = current.next;
		if (current === this.head) {
			return;
		}
	}
	if (current === this.head) {
		this.head = current.next;
		this.tail.next = this.head;
		this.head.prev = this.tail;
	} 
	else {
		current.prev.next = current.next;
	}
	if (current === this.tail) {
		this.tail = current.prev;
		this.head.prev = this.tail;
		return this.tail.next = this.head;
	} 
	else {
		return current.next.prev = current.prev;
	}
};

SortedCircularDoublyLinkedList.prototype.removeAll = function() {

}

SortedCircularDoublyLinkedList.prototype.contains = function(datum) {
	return this.find(datum) != null;
};

SortedCircularDoublyLinkedList.prototype.find = function(datum) {
	var current;
	if (!this.head) {
		return null;
	}
	else {
		current = this.head;
		while (current.next !== this.head) {
			if (this.compare(current.datum, datum) === 0) {
				return current;
			}
			current = current.next;
		}
		if (this.compare(current.datum, datum) === 0) {
			return current;
		}
		return null;
	}
};

SortedCircularDoublyLinkedList.prototype.print = function() {
	var current;
	var output = [];
	if (!(this.head != null)) {
		return output;
	}
	else {
		current = this.head;
		output.push(current.datum);
		while (current.next !== this.head) {
			current = current.next;
			output.push(current.datum);
		}
	}
	return output;
};

SortedCircularDoublyLinkedList.prototype.size = function() {
	var current;
	var count = 0;
	if (!this.head) {
		return count;
	}
	else {
		current = this.head;
		do{
			count++;
			current=current.next;
		}
		while (current !== this.head);
			return count;
	}
};

SortedCircularDoublyLinkedList.prototype.indexOf = function(datum) {
	var current;
	var count = 0;
	if (!this.head) {
		return -1;
	} 
	else {
		current = this.head;
		do {
			if (this.compare(current.datum, datum) === 0) {
				return count;
			}
			else {
				current = current.next;
				count++;
			}
		}
		while(current !== this.head);
			return -1;
	}
};

SortedCircularDoublyLinkedList.prototype.get = function(index) {
	var current;
	var found=null;
	if (!this.head||index<0) {
		return found;
	} 
	//maybe optimization can be made if the list is sorted we can choose to start from tail instead of tail on conditions
	else {
		current = this.head;
		while (index>0 && current.next !== this.head){
			current=current.next;
			index--;
		}
		if(index==0)
			found=current.datum;
		return found;
	}
};

SortedCircularDoublyLinkedList.prototype.tests = function() {
	var cdll = new SortedCircularDoublyLinkedList();
	console.log("Nuova CDLL");
	console.log(cdll.print()+" ["+cdll.size()+"]");
	console.log("Inserito elemento 1");
	cdll.insert(1);
	console.log(cdll.print()+" ["+cdll.size()+"]");
	console.log("Inserito elemento 2");
	cdll.insert(2);
	console.log(cdll.print()+" ["+cdll.size()+"]");
	console.log("Inserito elemento 3");
	cdll.insert(3);
	console.log(cdll.print()+" ["+cdll.size()+"]");
	console.log("Contiene elemento 3");
	console.log(cdll.contains(3));
	console.log("Rimosso elemento 3");
	cdll.remove(3);
	console.log(cdll.print()+" ["+cdll.size()+"]");
	console.log("Posizione di elemento 1");
	console.log(cdll.print()+" ["+cdll.indexOf(1)+"]");
	console.log("Posizione di elemento 2");
	console.log(cdll.print()+" ["+cdll.indexOf(2)+"]");
	console.log("Posizione di elemento 3");
	console.log(cdll.print()+" ["+cdll.indexOf(3)+"]");
	console.log("Elemento in posizione 0");
	console.log(cdll.print()+" ["+cdll.get(0)+"]");
	console.log("Elemento in posizione 1");
	console.log(cdll.print()+" ["+cdll.get(1)+"]");
	console.log("Elemento in posizione 2");
	console.log(cdll.print()+" ["+cdll.get(2)+"]");
};